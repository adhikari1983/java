Interface:
    Interfaces are contracts that helps multiple classes stay on the same page.
    It's like interfaces are  the blueprints for classes in Java.
    Interface defines a set of methods that a class must implement, whichever class is implementing it.
    They are also used to achieve abstraction and polymorphism.
    Most of the time they contain abstract methods which other classes implement.
    Interfaces also help us achieve multiple inheritance.
    
When should we use abstract classes and when should we use interface ?
    When there is none or very fewer similarities between two classes then we use
    interfaces. When a lot of instance fields and methods are same in multiple
    classes we can use abstract classes.

Polymorphism:
     It is one of the fundamental concepts in OOPs, and it refers to "the ability of an object to take on many forms".
     Achieving many forms through its behaviours.
     Subclasses of a class can define their own unique behaviors and yet share some of the same functionality
     of the parent class through method overriding and method overloading.
              **********    SAME METHOD NAME BEHAVES DIFFERENTLY    *************

     A. Runtime polymorphism / Dynamic binding ----through----> Method overriding
     B. Compile time polymorphism / Static binding ----through----> Method overloading

Encapsulation:
    Encapsulation allows us to write more secure code by making the fields private.
    we create classes in which fields are defined as instance fields and getter setter methods are created
    to control who can access and change the values of those fields.

Collections framework:
    The classes(ArrayList) inside collections framework are not fixed in size.
    These classes have built-in methods.

Arrays:
    They are very memory efficient. Because we can use primitive data types with arrays
    we can save upto 4x memory



