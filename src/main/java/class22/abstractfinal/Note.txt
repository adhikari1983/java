Interfaces:
    Interfaces are like contracts. Which guides us to create methods in a class.
    we implement interfaces with keyword implements.

    -> CHATgpt -> An interface in Java is a reference type that defines a contract or a set of method signatures that a
    class must implement. It serves as a blueprint for classes and defines the behavior
    that those classes must adhere to.

    -> ORACLE.doc -> An interface is a reference type, similar to a class, that can contain only constants,
    method signatures, default methods, static methods, and nested types.

    Method bodies exist only for default methods and static methods. Interfaces cannot be instantiatedâ€”they
    can only be implemented by classes or extended by other interfaces.

    They contain :
    -> public static final variables
    and by default
    -> methods are public and abstract.

Why we should use interfaces:
    we should use interfaces so that everyone knows which methods needs to be built.
Syntax:
    interface Interface1{


    }

1) Create a method that will find a number from an array.
2) Create a method to get the average of numbers from an array.
3) Create a method that will Count how many times the number is repeated.
appearing in an array.

    TOPICS TO BE REVISED BEFORE SELENIUM CLASS
    if else
    loops Nested loop
    break keyword
    classes and objects
    String class
    types of variables
    Methods
    abstraction
    polymorphism
    interfaces


    public boolean numFromArr(int[] arr) {
        boolean isNumber = false;
        int a = input.nextInt();
        for (int i : arr) {
            if (i == a) {
                isNumber = true;
                break;
            }
        }
        return isNumber;
    }

        void findNum(int[] array, int numToFind) {
            boolean isFound=false;
            for (int i : array) {if (numToFind == i) {isFound=true;}}
            System.out.println(isFound);
        }

public static int findIndexOfNumber(int[] arr,int target) {
        for (int i = 0; i < arr.length; i++) {
            if ( arr[i] == target )
                return i;
        }
        return -1;
    }

    // break till 2PM

==========================
public double averageFromArray(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += i;
        }
        return sum / arr.length;
    }

    int avgNumber(int[] array) {
            int sum=0;
            for (int i : array) {sum+=i;}
            return sum/array.length;
        }

          public int average(int[] array) {
                for (int i : array) {
                    sum += i;
                }
                return sum / (array.length);
            }
        }
======================================================
   public int getCount(int[] array, int number) {
           int count = 0;
           for (int i : array) {
               if (i == number) {
                   count++;
               }
           }
           return count;
       }

           public int searchArray(int[] arr, int num) {
               int sum = 0;
               for (int i = 0; i < arr.length; i++) {
                   if (arr[i] == num) {
                      sum++;

                   }
               } return sum;
           }
       }



       public int count(int[] arr) {
               int count=0;
               for (int i = 0; i <arr.length ; i++) {
                   count++;
               }
               return count;